ATIVIDADE 1

SQL exercises
Topic: DML
Prof. Alexandre Calaça github.com/alexcalaca.com
Aluno: Gabriel Henrique Wolff de Sousa
Blog: dev.to/alexcalaca

For the following exercises, create a table named Customers

CREATE TABLE Customers (
 id INT PRIMARY KEY,
 first_name VARCHAR(50),
 last_name VARCHAR(50),
 age INT);

1 - Insert a record with the following values:

INSERT INTO customers (id, first_name, last_name) 

VALUES (1, 'Mishel', 'Henry');

2 - Update the record when id is 1 with the following values:

UPDATE customers SET first_name = 'James', last_name = 'Henryy' WHERE id = 1;

3 - Delete the record when id is 1.

DELETE from Customers WHERE id = 1;

4 - Read (Select) only the second_name from the table Customers

SELECT last_name from Customers;

5 - Insert a record with the following values:

INSERT INTO Customers (id, first_name, last_name) 

VALUES (1, 'Jim', 'Hendrix');

6 - Read (Select) only the first_name from the table Customers when id is 2

SELECT first_name from Customers WHERE id = 2;

7 - Update the record when id is 2 with the following values:

UPDATE Customers SET first_name = 'Roselyn', last_name = 'Alvarez' WHERE id = 2;

8 - Upddate all records with the following value:

UPDATE Customers

SET first_name = 'Michael', last_name = 'Kyle';

9 - Select all records with all fields

SELECT * from Customers;

10 - Delete all records

DROP TABLE customers;




ATIVIDADE 2 

SQL exercises
Topic: Aggregate functions and SQL operators
Prof. Alexandre Calaça
Aluno: Gabriel henrique wolff de sousa
github.com/alexcalaca.com
Blog: dev.to/alexcalaca


For the following exercises, create a table named Products:

CREATE TABLE Products (
    id SERIAL PRIMARY KEY,         -- Automatic primary key
    product_name VARCHAR(100) NOT NULL,  -- Product name, must not be null
    description TEXT,             -- Optional description
    price NUMERIC(10, 2) NOT NULL, -- Price, must not be null, with two decimal places
    inserted_at DATE,              -- Date attribute to track creation date
    is_available BOOLEAN          -- Boolean attribute to indicate availability
);
1 - Find the Average Price of Available Products
Goal: Calculate the average price of all products that are currently available

SELECT AVG(price) AS average_price from Products WHERE is_available = TRUE;

2 - Identify the Most Expensive and Least Expensive Products
Goal: Find the maximum and minimum prices of products, and display the corresponding product names.

SELECT product_name, price from Products ORDER BY price DESC LIMIT 1;

SELECT product_name, price from Products ORDER BY price ASC LIMIT 1;

3 - Count the Number of Products Inserted in the Last 30 Days
Goal: Count how many products have been inserted in the last 30 days from today's date.

SELECT COUNT(*) AS product_count from Products WHERE inserted_at >= date('now', '-30 days');

4 - Sum the Prices of Products That Fall Within a Specific Price Range
Goal: Calculate the total price of products that have a price between 50 and 200.

SELECT SUM(price) AS total_price from Products WHERE price BETWEEN 50 AND 200;

5 - List Products with Specific Characteristics Using SQL Operators
Goal: Retrieve the names of products that are available, priced above 100, and do not contain the word "Basic" in their name.

SELECT product_name from Products WHERE is_available = TRUE
  AND price > 100
  AND product_name NOT LIKE '%Basic%';




ATIVIDADE 3 

SQL exercises
Topic: Joins
Prof. Alexandre Calaça
Aluno: Gabriel Henrique Wolff de Sousa
github.com/alexcalaca.com
Blog: dev.to/alexcalaca

For the following exercises:

CREATE TABLE Products (
    ProductID SERIAL PRIMARY KEY,
    ProductName VARCHAR(255) NOT NULL,
    CategoryID INT NOT NULL,
    Unit VARCHAR(255) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL
);

INSERT INTO Products (ProductName, CategoryID, Unit, Price) VALUES
('Chais', 1, '10 boxes x 20 bags', 18.00),
('Chang', 1, '24 - 12 oz bottles', 19.00),
('Aniseed Syrup', 2, '12 - 550 ml bottles', 10.00),
('Chef Anton''s Cajun Seasoning', 2, '48 - 6 oz jars', 22.00),
('Chef Anton''s Gumbo Mix', 2, '36 boxes', 21.35),
('Grandma''s Boysenberry Spread', 2, '12 - 8 oz jars', 25.00),
('Uncle Bob''s Organic Dried Pears', 7, '12 - 1 lb pkgs.', 30.00),
('Northwoods Cranberry Sauce', 2, '12 - 12 oz jars', 40.00),
('Mishi Kobe Niku', 6, '18 - 500 g pkgs.', 97.00),
('Ikura', 8, '12 - 200 ml jars', 31.00);

CREATE TABLE Categories (
    CategoryID SERIAL PRIMARY KEY,
    CategoryName VARCHAR(255) NOT NULL,
    Description TEXT
);

INSERT INTO Categories (CategoryName, Description) VALUES
('Beverages', 'Soft drinks, coffees, teas, beers, and ales'),
('Condiments', 'Sweet and savory sauces, relishes, spreads, and seasonings'),
('Confections', 'Desserts, candies, and sweet breads'),
('Dairy Products', 'Cheeses'),
('Grains/Cereals', 'Breads, crackers, pasta, and cereal'),
('Meat/Poultry', 'Prepared meats'),
('Produce', 'Dried fruit and bean curd'),
('Seafood', 'Seaweed and fish'),
('Snacks', 'Cookies, chips, and nuts'),
('Baking Goods', 'Flours, sugars, and chocolate');


1 - Insert a new product into the Products table with the following details:


INSERT INTO Products (ProductName, CategoryID, Unit, Price) VALUES ('Tofu', 7, '24 - 250 g pkgs.', 23.50);


2 - Update the price of the product 'Chang' to 21.00 in the Products table.


UPDATE Products SET Price = 21.00 WHERE ProductName = 'Chang';


3 - Calculate the total price of all products in the Products table.


SELECT SUM(Price) AS TotalPrice from Products;


4 - Select all fields from the Categories table.


SELECT *from Categories;


5 - Count the total number of products in the Products table.


SELECT COUNT(*) AS TotalProducts from Products;


6 - Select only the ProductName and Price fields from the Products table.


SELECT ProductName, Price from Products;


7 - Count the number of products in each category and display the CategoryID and the count.


SELECT CategoryID, COUNT(*) AS ProductCount from Products GROUP BY CategoryID;

8 - Select all fields from the Products and Categories tables where the CategoryID matches in both tables.


SELECT Products.*, Categories.*from Products


JOIN Categories ON Products.CategoryID = Categories.CategoryID;


9 - Delete the record for the product named 'Aniseed Syrup' from the Products table.


DELETE from Products WHERE ProductName = 'Aniseed Syrup';


10 - Select all fields from the Products table and any matching fields from the Categories table, showing all products even if they don't have a matching category.


SELECT Products., Categories. from Products


LEFT JOIN Categories ON Products.CategoryID = Categories.CategoryID;


11 - Update the Unit of the product Mishi Kobe Niku to 20 - 500 g pkgs. in the Products table.


UPDATE Products SET Unit = '20 - 500 g pkgs.' WHERE ProductName = 'Mishi Kobe Niku';


12 - Select all fields from the Categories table and any matching fields from the Products table, showing all categories even if they don't have matching products.



SELECT Categories., Products. from Categories


LEFT JOIN Products ON Categories.CategoryID = Products.CategoryID;
